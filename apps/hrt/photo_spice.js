// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require) {
    var $, Modernizr, checkScroll, exports, gVars, makeItHappen, makeMinHeight, moduleName, positionTitle, _window;
    $ = require("jquery");
    Modernizr = require("Modernizr");
    exports = {};
    moduleName = "photo_spice";
    _window = $(window);
    gVars = {
      em: parseFloat($("body").css("font-size"), 10),
      fade: {
        low: 0.15,
        high: 0.75
      },
      fadebarID: "ps_fadebar",
      fadebar: "#ps_fadebar",
      h2: {
        ml1: -550,
        ml2: 410
      },
      sectionMargin: {
        top: 0,
        bottom: 0
      },
      threshSides: 0.07,
      threshTB: 0.07,
      overhang: 5,
      maxRatio: 1 / 2,
      titleWidth: 0.1475
    };
    checkScroll = function(_this) {
      var gRange, getRGB, inverseOp, offset, opacity, pc, place, range, rgb, _h2;
      offset = _this.offset();
      place = Math.round(_this.height() + offset.top - _window.scrollTop());
      if (place > 0) {
        pc = (_window.height() - offset.top + _window.scrollTop()) / _window.height();
        _h2 = _this.find("h2");
        if (pc <= gVars.fade.low) {
          $(gVars.fadebar).css("opacity", 1);
          return _h2.css({
            "opacity": 0,
            "color": "#000"
          });
        } else if (pc < gVars.fade.high) {
          opacity = Math.round(100 * (1 - ((pc - gVars.fade.low) / (gVars.fade.high - gVars.fade.low)))) / 100;
          getRGB = Math.round((1 - opacity) * 255);
          rgb = "rgb(" + getRGB + "," + getRGB + "," + getRGB + ")";
          $(gVars.fadebar).css("opacity", opacity);
          inverseOp = 1 - opacity;
          range = gVars.h2.ml2 - gVars.h2.ml1;
          gRange = ((1 - opacity) * range) + gVars.h2.ml1;
          return _h2.css({
            "opacity": inverseOp,
            "color": rgb
          });
        } else {
          $(gVars.fadebar).css("opacity", 0);
          return _h2.css({
            "opacity": 1,
            "color": "#FFF"
          });
        }
      }
    };
    positionTitle = function(_this, winDim, lVars) {
      var fontAdjust, titleWidth, _title;
      _title = _this.find("h2");
      titleWidth = Math.round(lVars.titleWidth * winDim.adjusted.width);
      fontAdjust = 0.45;
      return _title.css({
        "width": titleWidth,
        "margin-left": (winDim.adjusted.width / 2) - titleWidth,
        "top": Math.round(winDim.adjusted.marginTop),
        "font-size": Math.round(fontAdjust * titleWidth)
      });
    };
    makeMinHeight = function(_this, lVars) {
      var mLeft, mTop, winDim, winHeight, winWidth, _section;
      winWidth = _window.width();
      winHeight = _window.height();
      mTop = lVars.threshTB * winHeight;
      mLeft = lVars.threshSides * winHeight;
      winDim = {
        width: winWidth,
        height: winHeight,
        margin: {
          top: mTop,
          left: mLeft
        },
        adjusted: {
          marginTop: 0,
          width: winWidth - 2 * mLeft,
          height: winHeight - 2 * mTop
        }
      };
      _section = _this.find("section");
      if (winDim.adjusted.height / winDim.adjusted.width <= lVars.maxRatio) {
        winDim.adjusted.width = winDim.adjusted.height / lVars.maxRatio;
        winDim.adjusted.marginTop = winDim.margin.top;
      } else {
        winDim.adjusted.height = winDim.adjusted.width * lVars.maxRatio;
        winDim.adjusted.marginTop = (winDim.height - winDim.adjusted.height) / 2;
      }
      _section.css({
        "width": Math.round(winDim.adjusted.width),
        "height": Math.round(winDim.adjusted.height),
        "margin-top": Math.round(winDim.adjusted.marginTop),
        "margin-bottom": Math.round(lVars.overhang * gVars.em + winDim.adjusted.marginTop)
      });
      return positionTitle(_this, winDim, lVars);
    };
    makeItHappen = function(_this) {
      var lVars, thisData;
      thisData = {};
      if (_this.data("photospice-thresh-sides") !== void 0) {
        thisData.threshSides = parseFloat(_this.data("photospice-thresh-sides"), 10);
      }
      if (_this.data("photospice-thresh-tb") !== void 0) {
        thisData.threshTB = parseFloat(_this.data("photospice-thresh-tb"), 10);
      }
      if (_this.data("photospice-max-ratio") !== void 0) {
        thisData.maxRatio = parseFloat(_this.data("photospice-max-ratio"), 10);
      }
      if (_this.data("photospice-overhang") !== void 0) {
        thisData.overhang = parseInt(_this.data("photospice-overhang"), 10);
      }
      if (_this.data("photospice-max-ratio") !== void 0) {
        thisData.maxRatio = parseFloat(_this.data("photospice-max-ratio"), 10);
      }
      if (_this.data("photospice-title-width") !== void 0) {
        thisData.titleWidth = parseFloat(_this.data("photospice-title-width"), 10);
      }
      lVars = {};
      lVars.threshSides = thisData.threshSides != null ? thisData.threshSides : gVars.threshSides;
      lVars.threshTB = thisData.threshTB != null ? thisData.threshTB : gVars.threshTB;
      lVars.overhang = thisData.overhang != null ? thisData.overhang : gVars.overhang;
      lVars.maxRatio = thisData.maxRatio != null ? thisData.maxRatio : gVars.maxRatio;
      lVars.titleWidth = thisData.titleWidth != null ? thisData.titleWidth : gVars.titleWidth;
      makeMinHeight(_this, lVars);
      _this.append($("<span />").attr("id", gVars.fadebarID));
      checkScroll(_this);
      _window.scroll(function() {
        return checkScroll(_this);
      });
      return _window.resize(function() {
        return makeMinHeight(_this, lVars);
      });
    };
    exports.init = function(_this) {
      var element;
      if (_this !== void 0) {
        return makeItHappen(_this);
      } else {
        element = $("body").find("[data-module=\"" + moduleName + "\"]");
        return element.each(function() {
          return makeItHappen($(this));
        });
      }
    };
    return exports;
  });

}).call(this);
