// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require) {
    var $, Modernizr, exports, footSize, footStreaks, gVars, loadStreaks, makeItHappen, moduleName, rileyKiss, scrollMath, streak, streakNoise, _window;
    $ = require("jquery");
    Modernizr = require("Modernizr");
    exports = {};
    gVars = {};
    moduleName = "footsie";
    _window = $(window);
    gVars = {
      em: parseInt($("body").css("font-size"), 10),
      winWidth: "",
      winHeight: "",
      showing: 0
    };
    loadStreaks = true;
    streak = {
      bgWidth: 30,
      lineWidth: 0.6,
      lineBaseLen: 4,
      lineRandLen: 4,
      blackBase: 0,
      blackRand: 0.015,
      whiteBase: 0.0,
      whiteRand: 0.015
    };
    streakNoise = document.createElement("canvas");
    rileyKiss = function(_this, lVars) {
      var arcVar, canvas, context, cutoff, inverseCut, magicFactor, nudge, phi;
      canvas = document.createElement("canvas");
      canvas.width = lVars.winWidth;
      canvas.height = lVars.winHeight;
      context = canvas.getContext("2d");
      phi = (1 + Math.sqrt(5)) / 2;
      cutoff = Math.round((phi - 1) * lVars.winHeight);
      cutoff = (2 / 3) * lVars.winHeight;
      inverseCut = lVars.winHeight - cutoff;
      nudge = 0.4 * gVars.em;
      magicFactor = 1.5;
      arcVar = {};
      arcVar.x = (2 - phi) * lVars.winWidth;
      arcVar.radius = magicFactor * lVars.winWidth;
      arcVar.y = 0 - arcVar.radius + cutoff - nudge;
      context.beginPath();
      context.arc(arcVar.x, arcVar.y, arcVar.radius, Math.PI * 0.25, Math.PI * 0.75, false);
      context.lineTo(0, cutoff);
      context.lineTo(lVars.winWidth, cutoff);
      context.closePath();
      context.fillStyle = "#FFF";
      context.fill();
      return _this.css({
        "background-image": "url(" + (canvas.toDataURL("image/png")) + "), url(" + (streakNoise.toDataURL("image/png")) + ")",
        "background-position": "100% 0, " + (streak.bgWidth * gVars.em) + "px 100%"
      });
    };
    footStreaks = function(lVars) {
      var bw, color, context, fillColor, fv, i, io, j, lw, opacity, strLen, _results;
      fv = {
        bgWidth: streak.bgWidth * gVars.em,
        lineWidth: streak.lineWidth * gVars.em,
        lineBaseLen: streak.lineBaseLen * gVars.em,
        lineRandLen: streak.lineRandLen * gVars.em
      };
      streakNoise.width = fv.bgWidth;
      streakNoise.height = lVars.winHeight;
      context = streakNoise.getContext("2d");
      lw = fv.lineWidth;
      i = Math.floor(lw / 2);
      _results = [];
      while (i < fv.bgWidth + 1) {
        color = ["rgba(0,0,0,", "rgba(255,255,255,"];
        j = 0;
        while (j < lVars.winHeight) {
          strLen = Math.round(Math.random() * fv.lineRandLen) + fv.lineBaseLen;
          io = Math.round(Math.random());
          bw = Math.round(Math.random());
          if (bw === 0) {
            opacity = Math.round((streak.blackBase + Math.random() * streak.blackRand) * 10000) / 10000;
          } else {
            opacity = Math.round((streak.whiteBase + Math.random() * streak.whiteRand) * 10000) / 10000;
          }
          fillColor = "" + color[bw] + opacity + ")";
          context.beginPath();
          context.moveTo(i, j);
          context.lineTo(i, strLen + j);
          context.lineWidth = lw;
          context.lineCap = "round";
          context.strokeStyle = fillColor;
          context.stroke();
          j += strLen;
        }
        _results.push(i += lw);
      }
      return _results;
    };
    footSize = function(_this) {
      gVars.winWidth = _window.width();
      gVars.winHeight = _window.height();
      return _this.css({
        "min-height": Math.round(gVars.winHeight * 1)
      });
    };
    scrollMath = function(_this, winHtLessOffset) {
      return gVars.showing = _window.scrollTop() + winHtLessOffset;
    };
    makeItHappen = function(_this) {
      var offset, winHtLessOffset;
      console.log("init for module " + moduleName);
      footSize(_this);
      offset = _this.offset();
      winHtLessOffset = _window.height() - offset.top;
      _window.scroll(function() {
        scrollMath(_this, winHtLessOffset);
        if (gVars.showing > 0 && loadStreaks === true) {
          loadStreaks = false;
          footStreaks(gVars);
          rileyKiss(_this, gVars);
          return console.log("bg for footers made!");
        }
      });
      return _window.resize(function() {
        footSize(_this);
        if (loadStreaks === true) {
          loadStreaks = false;
          footStreaks(gVars);
        }
        return rileyKiss(_this, gVars);
      });
    };
    exports.init = function(_this) {
      var element;
      if (_this !== void 0) {
        return makeItHappen(_this);
      } else {
        element = $("body").find("[data-module=\"" + moduleName + "\"]");
        return element.each(function() {
          return makeItHappen($(this));
        });
      }
    };
    return exports;
  });

}).call(this);
