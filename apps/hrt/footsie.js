// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require) {
    var $, Modernizr, exports, footStreaks, gVars, loadStreaks, makeItHappen, makeSections, makeSocialClick, moduleName, obfuscate, phi, riley, rileyKiss, rsaDisplay, rsaPublic, scrollMath, sects, streak, streakNoise, _window;
    $ = require("jquery");
    Modernizr = require("Modernizr");
    exports = {};
    gVars = {};
    moduleName = "footsie";
    _window = $(window);
    gVars = {
      em: parseInt($("body").css("font-size"), 10),
      winWidth: _window.width(),
      winHeight: _window.height(),
      showing: 0
    };
    phi = (1 + Math.sqrt(5)) / 2;
    loadStreaks = true;
    streak = {
      bgWidth: 30,
      lineWidth: 0.6,
      lineBaseLen: 4,
      lineRandLen: 4,
      blackBase: 0,
      blackRand: 0.015,
      whiteBase: 0.0,
      whiteRand: 0.015
    };
    streakNoise = document.createElement("canvas");
    riley = {
      cutoffRatio: 2 / 3,
      nudge: 0.4 * gVars.em,
      magicFactor: 1.5,
      magicMobile: 1
    };
    sects = {
      endThresh: 4 * gVars.em,
      windowFade: 300
    };
    rileyKiss = function(_this) {
      var arcVar, canvas, context, cutoff, inverseCut;
      canvas = document.createElement("canvas");
      canvas.width = gVars.winWidth;
      canvas.height = gVars.winHeight;
      context = canvas.getContext("2d");
      console.log("winHeight is " + gVars.winHeight + "!", "winWidth is " + gVars.winWidth + "!");
      cutoff = riley.cutoffRatio * gVars.winHeight;
      inverseCut = gVars.winHeight - cutoff;
      arcVar = {};
      arcVar.x = (2 - phi) * gVars.winWidth;
      arcVar.radius = riley.magicFactor * gVars.winWidth;
      arcVar.y = 0 - arcVar.radius + cutoff - riley.nudge;
      context.beginPath();
      context.arc(arcVar.x, arcVar.y, arcVar.radius, Math.PI * 0.25, Math.PI * 0.75, false);
      context.lineTo(0, cutoff);
      context.lineTo(gVars.winWidth, cutoff);
      context.closePath();
      context.fillStyle = "#FFF";
      context.fill();
      return _this.css({
        "background-image": "url(" + (canvas.toDataURL("image/png")) + "), url(" + (streakNoise.toDataURL("image/png")) + ")",
        "background-position": "100% 0, " + (streak.bgWidth * gVars.em) + "px 100%"
      });
    };
    footStreaks = function(lVars) {
      var bw, color, context, fillColor, fv, i, io, j, lw, opacity, strLen, _results;
      fv = {
        bgWidth: streak.bgWidth * gVars.em,
        lineWidth: streak.lineWidth * gVars.em,
        lineBaseLen: streak.lineBaseLen * gVars.em,
        lineRandLen: streak.lineRandLen * gVars.em
      };
      streakNoise.width = fv.bgWidth;
      streakNoise.height = lVars.winHeight;
      context = streakNoise.getContext("2d");
      lw = fv.lineWidth;
      i = Math.floor(lw / 2);
      _results = [];
      while (i < fv.bgWidth + 1) {
        color = ["rgba(0,0,0,", "rgba(255,255,255,"];
        j = 0;
        while (j < lVars.winHeight) {
          strLen = Math.round(Math.random() * fv.lineRandLen) + fv.lineBaseLen;
          io = Math.round(Math.random());
          bw = Math.round(Math.random());
          if (bw === 0) {
            opacity = Math.round((streak.blackBase + Math.random() * streak.blackRand) * 10000) / 10000;
          } else {
            opacity = Math.round((streak.whiteBase + Math.random() * streak.whiteRand) * 10000) / 10000;
          }
          fillColor = "" + color[bw] + opacity + ")";
          context.beginPath();
          context.moveTo(i, j);
          context.lineTo(i, strLen + j);
          context.lineWidth = lw;
          context.lineCap = "round";
          context.strokeStyle = fillColor;
          context.stroke();
          j += strLen;
        }
        _results.push(i += lw);
      }
      return _results;
    };
    scrollMath = function(_this, winHtLessOffset) {
      return gVars.showing = _window.scrollTop() + winHtLessOffset;
    };
    makeSections = function(_this) {
      var beginHt, diffHt, endHt, endSize, i, k, maybeHt, minEndHeight, sectHts, sections, toFull, _begin, _end, _i, _len;
      sections = _this.find("section");
      _begin = $(sections[0]);
      _end = $(sections[sections.length - 1]);
      endHt = (1 - riley.cutoffRatio) * gVars.winHeight;
      endSize = {};
      endSize.height = Math.round(_end.height());
      minEndHeight = endSize.height + 2 * sects.endThresh;
      toFull = Math.round(minEndHeight / (1 - riley.cutoffRatio));
      if (minEndHeight <= endHt) {
        maybeHt = _window.height();
        if (toFull > maybeHt) {
          gVars.winHeight = toFull;
        } else {
          gVars.winHeight = _window.height();
        }
        endSize.padTop = Math.round((endHt - endSize.height) / 2);
      } else {
        gVars.winHeight = toFull;
        endSize.padTop = sects.endThresh;
      }
      _begin.css({
        "height": ""
      });
      sectHts = [];
      for (k = _i = 0, _len = sections.length; _i < _len; k = ++_i) {
        i = sections[k];
        if (k < sections.length - 1) {
          sectHts[k] = [];
          sectHts[k].push($(i).height());
        }
      }
      diffHt = Math.round(gVars.winHeight - _window.height());
      sectHts[0][1] = Math.round((gVars.winWidth / riley.magicFactor) / 10);
      sectHts[1][1] = Math.round((gVars.winWidth / riley.magicFactor) / 20);
      beginHt = Math.round(riley.cutoffRatio * gVars.winHeight);
      _this.css({
        "min-height": gVars.winHeight
      });
      if (diffHt > 0 && Modernizr.touch === false) {
        _begin.css({
          "height": beginHt - diffHt,
          "padding-top": diffHt
        });
        _begin.find("h3:first-of-type").css({
          "padding-top": 0
        });
        _begin.next().css({
          "padding-top": diffHt
        });
        _begin.next().find("h3:first-of-type").css({
          "padding-top": 0
        });
      } else {
        _begin.css({
          "height": Math.round(riley.cutoffRatio * gVars.winHeight)
        });
      }
      return _end.css({
        "padding-top": endSize.padTop
      });
    };
    obfuscate = function(_this) {
      var address, href, subject, _mail;
      _mail = _this.find($("[data-module=\"obfuscate\"]"));
      address = _mail.html();
      subject = _mail.data("obfuscate-subject");
      href = "mailto:" + address + "?subject=" + subject;
      _mail.wrapInner("<a />");
      return _mail.find("a").attr({
        "href": href
      });
    };
    makeSocialClick = function(_this) {
      return _this.on("click", "li", function(e) {
        var href, _links;
        _links = $(this).find("a");
        if (_links.length === 1) {
          href = _links.attr("href");
          return window.location.href = href;
        }
      });
    };
    rsaDisplay = function(e, $rpk) {
      e.preventDefault();
      if ($rpk.attr("aria-expanded") === "false") {
        return $rpk.fadeIn(sects.windowFade, function() {
          return $rpk.attr("aria-expanded", true);
        });
      } else {
        return $rpk.fadeOut(sects.windowFade, function() {
          return $rpk.attr("aria-expanded", false);
        });
      }
    };
    rsaPublic = function($this) {
      var $rpk, $section, cutKey, exponent, modArray, modOut, modulus;
      $this.wrapInner($("<a />").attr({
        "href": ""
      }));
      modulus = $this.attr("content");
      exponent = $this.next().html();
      $section = $this.closest("section");
      modArray = [];
      cutKey = modulus;
      while (cutKey.length > 0) {
        modArray.push(cutKey.substring(0, 32));
        cutKey = cutKey.substring(32);
      }
      modOut = modArray.join("<br />");
      $section.append($("<div />").attr({
        "class": "rsa_pub_key",
        "aria-expanded": false
      }));
      $rpk = $section.find(".rsa_pub_key");
      $rpk.append($("<a />").html("close [X]").attr({
        "href": "",
        "title": "Close Window"
      }));
      $rpk.append($("<code />").html("Modulus (Hexadecimal):")).append($("<br />"));
      $rpk.append($("<code />").html(modOut)).append($("<br />"));
      $rpk.append($("<code />").html("Exponent (Decimal): " + exponent));
      $this.on("click", "a", function(e) {
        return rsaDisplay(e, $rpk);
      });
      return $rpk.on("click", "a", function(e) {
        return rsaDisplay(e, $rpk);
      });
    };
    makeItHappen = function(_this) {
      var offset, winHtLessOffset;
      obfuscate(_this);
      if (Modernizr.touch === true) {
        riley.magicFactor = riley.magicMobile;
      }
      offset = _this.offset();
      winHtLessOffset = _window.height() - offset.top;
      _window.scroll(function() {
        scrollMath(_this, winHtLessOffset);
        if (gVars.showing > 0 && loadStreaks === true) {
          loadStreaks = false;
          rsaPublic(_this.find($('[property="cert:modulus"]')));
          makeSocialClick(_this.find(".social_fu"));
          makeSections(_this);
          footStreaks(gVars);
          rileyKiss(_this);
          return console.log("scrolled to footsie");
        }
      });
      return _window.resize(function() {
        gVars.winWidth = _window.width();
        makeSections(_this);
        if (loadStreaks === true) {
          loadStreaks = false;
          footStreaks(gVars);
        }
        return rileyKiss(_this);
      });
    };
    exports.init = function(_this) {
      var element;
      if (_this !== void 0) {
        return makeItHappen(_this);
      } else {
        element = $("body").find("[data-module=\"" + moduleName + "\"]");
        return element.each(function() {
          return makeItHappen($(this));
        });
      }
    };
    return exports;
  });

}).call(this);
