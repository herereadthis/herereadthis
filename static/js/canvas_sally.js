// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require) {
    var $, em, exports, gVars, makeCircle, positionCanvas;
    $ = require("jquery");
    exports = {};
    gVars = {};
    em = parseInt($("body").css("font-size"), 10);
    makeCircle = function(context, _this, settings) {
      var center, radius;
      center = {
        x: _this.width() / 2,
        y: _this.width() / 2
      };
      radius = _this.width() / 2;
      context.beginPath();
      context.arc(center.x, center.y, radius, 0, 2 * Math.PI, false);
      context.fillStyle = settings.color;
      return context.fill();
    };
    positionCanvas = function(_this, settings) {
      var absAdjust, absTop, canvasPosition, canvasWidth, parentLeftPad, parentMinHeight, parentPad, parentTopPad, parentWidth, _parent;
      _parent = _this.parent();
      parentLeftPad = parseInt(_this.parent().css("padding-left"), 10);
      _parent.css({
        "padding-left": ""
      });
      parentWidth = _parent.width();
      parentPad = settings.pad * em;
      canvasWidth = Math.round(settings.width * parentWidth / 100);
      canvasPosition = _this.css("position");
      if (canvasPosition === "absolute") {
        if (settings.float === "left") {
          absAdjust = parseInt(_this.css("left"), 10);
          _parent.css({
            "padding-left": 0
          });
        } else {
          absAdjust = 0;
        }
        parentTopPad = parseInt(_parent.css("padding-top"), 10);
        absTop = parseInt(_this.css("top"), 10) || 0;
        parentMinHeight = canvasWidth - parentTopPad + absTop;
        _parent.css({
          "min-height": parentMinHeight
        });
      } else {
        absAdjust = 0;
      }
      _this.attr({
        "width": canvasWidth,
        "height": canvasWidth
      }).css({
        "float": settings.cssFloat
      });
      return _this.siblings().css({
        "margin-left": parentPad + canvasWidth + absAdjust - parentLeftPad
      });
    };
    exports.init = function(element) {
      var canvas, context, settings;
      em = parseInt($("body").css("font-size"), 10);
      settings = {
        id: element.attr("id"),
        color: element.data("color"),
        shape: element.data("shape"),
        width: element.data("width"),
        cssFloat: element.data("css-float") || "none",
        pad: element.data("pad") || 0
      };
      canvas = document.getElementById(settings.id);
      context = canvas.getContext("2d");
      positionCanvas($(element), settings);
      if (settings.shape === "circle") {
        makeCircle(context, $(element), settings);
      }
      $(window).resize(function() {
        return positionCanvas($(element), settings);
      });
      if (settings.shape === "circle") {
        return makeCircle(context, $(element), settings);
      }
    };
    return exports;
  });

}).call(this);
