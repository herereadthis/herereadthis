// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require) {
    var $, Modernizr, ResizeFu, code_tango, em, exports, gVars, makeIndex, makeItHappen, moduleName, preClass, preParent;
    $ = require("jquery");
    Modernizr = require("Modernizr");
    ResizeFu = require("resize_fu");
    exports = {};
    gVars = {};
    moduleName = "coding";
    preClass = "code_tango";
    preParent = "blockquote";
    em = parseInt($("body").css("font-size"), 10);
    makeIndex = function(_this, lineCount) {
      var i, iLength, indices, j, maxIndex, _i, _j, _k, _len, _len1, _len2, _results;
      indices = [];
      indices.length = lineCount;
      for (j = _i = 0, _len = indices.length; _i < _len; j = ++_i) {
        i = indices[j];
        indices[j] = "" + (j + 1) + ".";
      }
      maxIndex = indices[lineCount - 1].length;
      for (j = _j = 0, _len1 = indices.length; _j < _len1; j = ++_j) {
        i = indices[j];
        iLength = i.length;
        while (iLength < maxIndex) {
          indices[j] = " " + i;
          iLength++;
        }
      }
      _this.closest("div").before($("<div />").addClass("code_copy").html($("<pre />")));
      _results = [];
      for (j = _k = 0, _len2 = indices.length; _k < _len2; j = ++_k) {
        i = indices[j];
        indices[j] = "<span>" + i + "</span>";
        _this.closest("div").prev().find("pre").append(indices[j]);
        if (j < lineCount) {
          _results.push(_this.closest("div").prev().find("pre").append("\n"));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    code_tango = function(_this) {
      var blockWidth, divDim, i, indexWidth, j, lineCount, snippet, _code, _div, _i, _len;
      _this.closest(preParent).addClass(preClass);
      _this.wrap('<div class="code_container" />');
      _this.wrap('<div class="code_copy" />');
      _code = _this.find("code");
      snippet = _code.html().split("\n");
      _code.empty();
      lineCount = snippet.length;
      for (j = _i = 0, _len = snippet.length; _i < _len; j = ++_i) {
        i = snippet[j];
        snippet[j] = "<span>" + i + "</span>";
        _code.append(snippet[j]);
        if (j < lineCount) {
          _code.append("\n");
        }
      }
      makeIndex(_this, lineCount);
      _div = _this.parent("div");
      divDim = {
        pr: parseInt(_div.attr("padding-right"), 10),
        pl: parseInt(_div.attr("padding-left"), 10),
        outerWt: _div.outerWidth()
      };
      indexWidth = _this.parent().prev("div").outerWidth();
      _div.parent("div").css({
        "min-width": divDim.outerWt + indexWidth
      });
      blockWidth = _this.closest("blockquote").width();
      if (blockWidth > divDim.outerWt + indexWidth) {

      } else {
        return _this.parent("div").parent("div").css({
          "width": divDim.outerWt + indexWidth
        });
      }
    };
    makeItHappen = function(_this) {
      var i, pres, _i, _len;
      pres = _this.find("pre");
      for (_i = 0, _len = pres.length; _i < _len; _i++) {
        i = pres[_i];
        code_tango($(i));
      }
      return ResizeFu.init(_this);
    };
    exports.init = function(_this) {
      var element;
      if (_this !== void 0) {
        return makeItHappen(_this);
      } else {
        element = $("body").find("[data-module=\"" + moduleName + "\"]");
        return element.each(function() {
          return makeItHappen($(this));
        });
      }
    };
    return exports;
  });

}).call(this);
