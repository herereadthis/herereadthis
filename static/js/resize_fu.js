// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require) {
    var $, Modernizr, exports, gVars, getBrowserDim, getElementDim, makePads, makeResize;
    $ = require("jquery");
    Modernizr = require("Modernizr");
    exports = {};
    gVars = {
      browserWt: 0,
      browserHt: 0,
      idealWidth: 108,
      sidePad: 5,
      threshold: {
        top: 5,
        bottom: 5
      },
      maxRatio: (1 + Math.sqrt(5)) / 2 - 1,
      peekNext: 3,
      em: parseInt($("body").css("font-size"), 10)
    };
    getBrowserDim = function() {
      gVars.browserWt = $(window).width();
      return gVars.browserHt = $(window).height();
    };
    getElementDim = function(_this) {
      var thisDim;
      _this.css({
        "padding-top": "",
        "padding-bottom": ""
      });
      thisDim = {
        width: _this.width(),
        height: _this.height(),
        outerWt: _this.outerWidth(true),
        outerHt: _this.outerHeight(true),
        padding: {
          top: parseInt(_this.css("padding-top"), 10),
          right: parseInt(_this.css("padding-right"), 10),
          bottom: parseInt(_this.css("padding-bottom"), 10),
          left: parseInt(_this.css("padding-left"), 10)
        }
      };
      return thisDim;
    };
    makePads = function(_this, threshTop, threshBot) {
      threshTop = threshTop || 0;
      threshBot = threshBot || threshTop;
      return _this.css({
        "padding-top": "" + threshTop + "em",
        "padding-bottom": "" + threshBot + "em"
      });
    };
    makeResize = function(_this, thisData) {
      var subTheoryHeight, theoryWidth, thisDim, thresholds;
      getBrowserDim();
      thisDim = getElementDim(_this);
      theoryWidth = (gVars.idealWidth + 2 * gVars.sidePad) * gVars.em;
      if (gVars.browserWt > theoryWidth) {
        if (gVars.browserHt < thisDim.height) {
          console.log("we have too much for  " + (_this.find("h2").html()));
          return makePads(_this, thisDim.padding.top / gVars.em, gVars.threshold.bottom);
        } else if (((gVars.browserHt - gVars.peekNext * gVars.em) / (theoryWidth * gVars.em)) > gVars.maxRatio) {
          console.log("we have very large window size for  " + (_this.find("h2").html()));
          subTheoryHeight = thisDim.height + (gVars.threshold.top + gVars.threshold.bottom) * gVars.em;
          if (subTheoryHeight < gVars.maxRatio * theoryWidth * gVars.em) {
            thresholds = (gVars.maxRatio * theoryWidth * gVars.em) - thisDim.height;
            thresholds = (thresholds / 2) / gVars.em;
            return makePads(_this, thresholds);
          } else {
            return makePads(_this, gVars.threshold.top, gVars.threshold.bottom);
          }
        } else {
          console.log("we have ideal for  " + (_this.find("h2").html()));
          if (((gVars.browserHt - thisDim.height) / gVars.em) > (gVars.threshold.top + gVars.threshold.bottom)) {
            thresholds = (((gVars.browserHt - thisDim.height) / gVars.em) - gVars.peekNext) / 2;
            return makePads(_this, thresholds);
          } else {
            return makePads(_this, gVars.threshold.top, gVars.threshold.bottom);
          }
        }
      } else {
        return makePads(_this, gVars.threshold.top, gVars.threshold.bottom);
      }
    };
    exports.init = function(_this) {
      var settings, thisData, _body;
      settings = {
        var1: "foo"
      };
      _body = $("body");
      thisData = {
        idealWidth: _body.data("resizefu-ideal-width") !== void 0 ? parseInt(_body.data("resizefu-ideal-width"), 10) : void 0,
        sidePad: _body.data("resizefu-side-pad") !== void 0 ? parseInt(_body.data("resizefu-side-pad"), 10) : void 0,
        threshold: {
          top: _this.data("resizefu-threshold-top") !== void 0 ? parseInt(_this.data("resizefu-threshold-top"), 10) : void 0,
          bottom: _this.data("resizefu-threshold-bottom") !== void 0 ? parseInt(_this.data("resizefu-threshold-bottom"), 10) : void 0
        },
        peekNext: _this.data("resizefu-peek-next") !== void 0 ? parseInt(_this.data("resizefu-peek-next"), 10) : void 0,
        maxRatio: _this.data("resizefu-max-ratio") !== void 0 ? parseInt(_this.data("resizefu-max-ratio"), 10) : void 0
      };
      gVars.idealWidth = thisData.idealWidth != null ? thisData.idealWidth : gVars.peekNext;
      gVars.sidePad = thisData.sidePad != null ? thisData.sidePad : gVars.peekNext;
      gVars.threshold = {
        top: thisData.threshold.top != null ? thisData.threshold.top : gVars.threshold.top,
        bottom: thisData.threshold.bottom != null ? thisData.threshold.bottom : gVars.threshold.top
      };
      gVars.peekNext = thisData.peekNext != null ? thisData.peekNext : gVars.peekNext;
      gVars.maxRatio = thisData.maxRatio != null ? thisData.maxRatio : gVars.maxRatio;
      makeResize(_this, thisData);
      return $(window).resize(function() {
        return makeResize(_this);
      });
    };
    return exports;
  });

}).call(this);
