// Generated by CoffeeScript 1.3.3
(function() {

  (function(jQuery) {
    var $, methods, settings;
    $ = jQuery;
    settings = {
      variableName: true,
      formatClassName: "code_tango",
      preParent: "blockquote"
    };
    methods = {
      init: function(options) {
        return this.each(function() {
          var $this, blockWidth, divDim, i, indexWidth, j, lineCount, snippet, _code, _div, _i, _len;
          $.extend(settings, options);
          $this = $(this);
          $this.closest(settings.preParent).addClass(settings.formatClassName);
          $this.wrap('<div class="code_container" />');
          $this.wrap('<div class="code_copy" />');
          _code = $this.find("code");
          snippet = _code.html().split("\n");
          _code.empty();
          lineCount = snippet.length;
          for (j = _i = 0, _len = snippet.length; _i < _len; j = ++_i) {
            i = snippet[j];
            snippet[j] = "<span>" + i + "</span>";
            _code.append(snippet[j]);
            if (j < lineCount) {
              _code.append("\n");
            }
          }
          methods.makeIndex($this, lineCount);
          _div = $this.parent("div");
          divDim = {
            pr: parseInt(_div.attr("padding-right"), 10),
            pl: parseInt(_div.attr("padding-left"), 10),
            outerWt: _div.outerWidth()
          };
          indexWidth = $this.parent().prev("div").outerWidth();
          _div.parent("div").css({
            "min-width": divDim.outerWt + indexWidth
          });
          blockWidth = $this.closest("blockquote").width();
          if (blockWidth > divDim.outerWt + indexWidth) {

          } else {
            return $this.parent("div").parent("div").css({
              "width": divDim.outerWt + indexWidth
            });
          }
        });
      },
      makeIndex: function(_this, lineCount) {
        var i, iLength, indices, j, maxIndex, _i, _j, _k, _len, _len1, _len2, _results;
        indices = [];
        indices.length = lineCount;
        for (j = _i = 0, _len = indices.length; _i < _len; j = ++_i) {
          i = indices[j];
          indices[j] = "" + (j + 1) + ".";
        }
        maxIndex = indices[lineCount - 1].length;
        for (j = _j = 0, _len1 = indices.length; _j < _len1; j = ++_j) {
          i = indices[j];
          iLength = i.length;
          while (iLength < maxIndex) {
            indices[j] = " " + i;
            iLength++;
          }
        }
        _this.closest("div").before($("<div />").addClass("code_copy").html($("<pre />")));
        _results = [];
        for (j = _k = 0, _len2 = indices.length; _k < _len2; j = ++_k) {
          i = indices[j];
          indices[j] = "<span>" + i + "</span>";
          _this.closest("div").prev().find("pre").append(indices[j]);
          if (j < lineCount) {
            _results.push(_this.closest("div").prev().find("pre").append("\n"));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };
    return $.fn.codeTango = function(method) {
      if (methods[method]) {
        return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
      } else if (typeof method === 'object' || !method) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error('Method ' + method + ' does not exist on jQuery.codeTango');
      }
    };
  })(jQuery);

}).call(this);
